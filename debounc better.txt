library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity counter_7seg is
    port (
        clk     : in  std_logic;
        btn     : in  std_logic;
        seg     : out std_logic_vector(6 downto 0)  -- 7 segmentów (a-g), aktywne 0
    );
end counter_7seg;

architecture Behavioral of counter_7seg is
    constant debounce_limit : integer := 25000;

    signal btn_counter  : integer := 0;
    signal btn_last     : std_logic := '0';
    signal count        : unsigned(3 downto 0) := (others => '0');
    signal seg_val      : std_logic_vector(6 downto 0);
begin

    -- Debounce + licznik
    process(clk)
    begin
        if rising_edge(clk) then
            if btn = '1' then
                if btn_counter < debounce_limit then
                    btn_counter <= btn_counter + 1;
                end if;
            else
                btn_counter <= 0;
            end if;

            if btn_counter = debounce_limit and btn_last = '0' then
                if count = 9 then
                    count <= (others => '0');
                else
                    count <= count + 1;
                end if;
            end if;

            btn_last <= btn;
        end if;
    end process;

    -- Dekoder binarny na 7-segmentowy
    process(count)
    begin
        case count is
            when "0000" => seg_val <= "0000001"; -- 0
            when "0001" => seg_val <= "1001111"; -- 1
            when "0010" => seg_val <= "0010010"; -- 2
            when "0011" => seg_val <= "0000110"; -- 3
            when "0100" => seg_val <= "1001100"; -- 4
            when "0101" => seg_val <= "0100100"; -- 5
            when "0110" => seg_val <= "0100000"; -- 6
            when "0111" => seg_val <= "0001111"; -- 7
            when "1000" => seg_val <= "0000000"; -- 8
            when "1001" => seg_val <= "0000100"; -- 9
            when others => seg_val <= "1111111"; -- nic nie świeci
        end case;
    end process;

    seg <= seg_val;

end Behavioral;
