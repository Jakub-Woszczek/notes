library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity menu_selector is
    port (
        clk          : in std_logic;       -- zegar (np. 50 MHz)
        btn_left     : in std_logic;       -- lewy przycisk
        btn_right    : in std_logic;       -- prawy przycisk
        hex_left     : out std_logic_vector(6 downto 0); -- lewy wyświetlacz 7-seg
        hex_right    : out std_logic_vector(6 downto 0)  -- prawy wyświetlacz 7-seg
    );
end entity;

architecture Behavioral of menu_selector is

    signal val_left     : unsigned(3 downto 0) := (others => '0'); -- 0..9
    signal val_right    : unsigned(3 downto 0) := (others => '0'); -- zatwierdzona wartość

    -- debounce: stałe
    constant CNT_MAX : integer := 1_000_000; -- ~20 ms przy 50 MHz

    -- debounce: lewy przycisk
    signal btn_left_sync  : std_logic_vector(2 downto 0) := (others => '0');
    signal btn_left_state : std_logic := '0';
    signal btn_left_cnt   : integer range 0 to CNT_MAX := 0;
    signal btn_left_prev  : std_logic := '0';

    -- debounce: prawy przycisk
    signal btn_right_sync  : std_logic_vector(2 downto 0) := (others => '0');
    signal btn_right_state : std_logic := '0';
    signal btn_right_cnt   : integer range 0 to CNT_MAX := 0;
    signal btn_right_prev  : std_logic := '0';

    -- funkcja konwertująca cyfrę 0-9 na kod 7-seg (aktywne 0)
    function digit_to_7seg(d : unsigned(3 downto 0)) return std_logic_vector is
        variable seg : std_logic_vector(6 downto 0);
    begin
        case to_integer(d) is
            when 0 => seg := "1000000"; -- 0
            when 1 => seg := "1111001"; -- 1
            when 2 => seg := "0100100"; -- 2
            when 3 => seg := "0110000"; -- 3
            when 4 => seg := "0011001"; -- 4
            when 5 => seg := "0010010"; -- 5
            when 6 => seg := "0000010"; -- 6
            when 7 => seg := "1111000"; -- 7
            when 8 => seg := "0000000"; -- 8
            when 9 => seg := "0010000"; -- 9
            when others => seg := "1111111"; -- wyłączony wyświetlacz
        end case;
        return seg;
    end function;

begin

    process(clk)
    begin
        if rising_edge(clk) then

            -- === DEBOUNCE: LEFT BUTTON ===
            btn_left_sync <= btn_left_sync(1 downto 0) & btn_left;

            if btn_left_sync(2) = btn_left_sync(1) then
                if btn_left_sync(2) /= btn_left_state then
                    btn_left_cnt <= 0;
                else
                    if btn_left_cnt < CNT_MAX then
                        btn_left_cnt <= btn_left_cnt + 1;
                    end if;
                    if btn_left_cnt = CNT_MAX then
                        btn_left_state <= btn_left_sync(2);
                    end if;
                end if;
            else
                btn_left_cnt <= 0;
            end if;

            -- === DEBOUNCE: RIGHT BUTTON ===
            btn_right_sync <= btn_right_sync(1 downto 0) & btn_right;

            if btn_right_sync(2) = btn_right_sync(1) then
                if btn_right_sync(2) /= btn_right_state then
                    btn_right_cnt <= 0;
                else
                    if btn_right_cnt < CNT_MAX then
                        btn_right_cnt <= btn_right_cnt + 1;
                    end if;
                    if btn_right_cnt = CNT_MAX then
                        btn_right_state <= btn_right_sync(2);
                    end if;
                end if;
            else
                btn_right_cnt <= 0;
            end if;

            -- === OBSŁUGA PRZYCISKÓW Z DEBOUNCINGIEM ===
            if btn_left_state = '1' and btn_left_prev = '0' then
                if val_left = 9 then
                    val_left <= (others => '0');
                else
                    val_left <= val_left + 1;
                end if;
            end if;

            if btn_right_state = '1' and btn_right_prev = '0' then
                val_right <= val_left;
            end if;

            btn_left_prev  <= btn_left_state;
            btn_right_prev <= btn_right_state;
        end if;
    end process;

    -- wyświetlacze
    hex_left  <= digit_to_7seg(val_left);
    hex_right <= digit_to_7seg(val_right);

end Behavioral;
